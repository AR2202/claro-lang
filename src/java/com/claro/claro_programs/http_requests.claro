HttpService BuggyBuggies {
  hostGame: "/api/host/{handle}",
  friendsJoin: "/api/game/{gameId}/join/{handle}",
  move: "/api/game/{gameId}/player/{secret}/move/{direction}"
}
var buggyBuggiesClient: HttpClient<BuggyBuggies> = getHttpClient("https://buggy-buggies.gigalixirapp.com");

var handle = "claro has native support for http reqs!";
var gameId = "fbbf7900-57e4-40f7-8b41-fe0a13e2f89c";
var playerSecret = "ca262cc4-a8f7-4dab-9d5e-ad08c9e4ece5";

if (input("Do you want to start a new game? (Y/N): ") == "Y") {
  handle = input("What's your game handle?: ");
  var hostGameResponse: oneof<string, Error<string>> <-| hostGame(buggyBuggiesClient, handle);
  if (hostGameResponse instanceof string) {
    print("Here's the hostGame response:\n{hostGameResponse}");
    gameId = input("Claro doesn't have a string stdlib yet, what's the game id?: ");
    playerSecret = input("Claro doesn't have a string stdlib yet, what's the player secret?: ");
  } else {
    print("The hostGame() request failed with the following response:\n{hostGameResponse}");
    print("Falling back to default handle/gameId/playerSecret.");
  }
  _ = input("Hit enter once you're ready to start playing!");
}

var userInput = input("Which direction do you want to move? (N/E/S/W): ");
while (true) {
  var parsedMove = parseMove(userInput);

  if (parsedMove instanceof Error<string>) {
    print(parsedMove);
  } if (parsedMove instanceof Error<EndGame>) {
    print("Good game!");
    break;
  } else if (parsedMove instanceof string) {
    _ = handleMove(buggyBuggiesClient, gameId, playerSecret, parsedMove);
  } else if (parsedMove instanceof RepeatMove) {
    repeat(unwrap(parsedMove).dist) {
      var response = handleMove(buggyBuggiesClient, gameId, playerSecret, unwrap(parsedMove).dir);
      if (response instanceof Error<string>) {
        print("Got an error response before completing full set of moves.");
        break;
      }
    }
  }

  userInput = input("Which direction do you want to move? (N/E/S/W): ");
}

blocking function handleMove(client: HttpClient<BuggyBuggies>, gameId: string, playerSecret: string, dir: string)
    -> oneof<string, Error<string>> {
  var moveResponse <-| move(client, gameId, playerSecret, dir);
  print("Move Response:\n{moveResponse}");
  return moveResponse;
}

newtype RepeatMove: struct{
  dist: int,
  dir: string
}
newtype EndGame: NothingType
function parseMove(moveInput: string) -> oneof<string, RepeatMove, Error<string>, Error<EndGame>> {
  var dirs = {"N", "E", "S", "W"};
  var numbers = {"{x}":x | x in [1,2,3,4,5,6,7,8,9]};

  if (len(moveInput) == 1) {
    if (moveInput in dirs) {
      return moveInput;
    }
  } else if ((len(moveInput) == 2) and (moveInput[0] in numbers) and (moveInput[1] in dirs)) {
    return RepeatMove({dist = numbers[moveInput[0]], dir = moveInput[1]});
  }

  if (len(moveInput) == 0) {
    return Error(EndGame(nothing));
  } else {
    return Error("Unexpected input: {moveInput}");
  }
}


























































































#alias HostGameResponse : struct {
#  reason: oneof<string, NothingType>,
#  result: struct {
#    example: string,
#    game_id: string,
#    secret: string,
#    watch: string
#  },
#  success: boolean
#}
#var hostResponse: oneof<string, Error<HttpError>> <-| BuggyBuggies::hostGame(buggyBuggiesClient, {handle = "Jason"});
#if (hostResponse instanceof string) {
#  var hostGameResponse: HostGameResponse = fromJson(hostResponse);
#  BuggyBuggies::friendsJoin(buggyBuggiesClient, {gameId = hostGameResponse.result.game_id, handle = "Jason"});
#}
