
# Claro allows the definition of user defined types using the `newtype` keyword! This has *no affect on the generated
# code* it simply allows programmers to indicate that while some types may be *represented* the same at a storage level,
# at a higher conceptual level, they have *semantically distinct interpretations*. So, Claro will enforce this
# distinction in order to allow you to ensure that data of distinct types is always handled in a way that is cognizant
# of the semantics of the custom type.

newtype MyInt : int

var myInt : MyInt = MyInt(1);
print(myInt);
type(myInt);

# By design, there is *NO INHERITANCE* of implementation from the wrapped type. To demonstrate, in the below example,
# even though the type wraps `int`, you cannot do addition with `MyInt` instances (by default, w/o explicitly
# defining how addition works for your custom type).
# Uncomment any of the below lines to see compile-time errors complaining about type mismatches.
#print(myInt + myInt);

# In order to actually get at the wrapped type, Claro provides a builtin `unwrap()` function. Conceptually, think of
# this function as "decoding" or "reinterpreting" the outer type into the wrapped type.
var unwrappedInt : int = unwrap(myInt);
print(unwrappedInt);
type(unwrappedInt);
# Now that you've reinterpreted the MyInt as an int, you can use the `+` operator again since it's impl'd for ints.
print(unwrappedInt + unwrappedInt);


# It's a design decision up to the programmer to decide whether this is valuable, but you may also define newtype's
# based off of another newtype. Again, this establishes an indication that they will share the same underlying concrete
# representation in memory, and MORE IMPORTANTLY that they share the same foundational semantic constraints imposed by
# the wrapped type with ADDITIONAL constraints on top. So here, MyOtherInt is also represented as `int` because
# `MyInt` is represented as an `int`. In some way this could be useful even just in helping you to make sure that two
# types remain structurally equivalent if that's important to you for some reason. But more importantly you can use this
# to layer semantic constraints or reinterpretations.
newtype MyOtherInt : MyInt
var myOtherInt: MyOtherInt = MyOtherInt(myInt);
print(myOtherInt);
type(myOtherInt);

unwrappedInt = unwrap(unwrap(myOtherInt));
print(unwrappedInt + unwrappedInt);

# New Types are, by design, *NOT* mutually compatible with any (transitive) base types they are defined on. Claro very
# intentionally *will never* support traditional subtyping relationships as found in other languages. Remember that the
# *entire point of defining a newtype* is that you claim these things are semantically distinct from one another.

# Uncomment any of the below lines to see compile-time errors complaining about type mismatches.
#myInt = myOtherInt;
#myOtherInt = myInt;
#myInt = 1;
#myOtherInt = 1;


########################################################################################################################
# As you should expect, you can now do anything with your custom types that you could do with builtin types. Here's a
# non-trivial example of doing runtime dynamic dispatch over values of your custom types.
########################################################################################################################

contract Foo<T> {
  consumer bar(t: T);
}
implement Foo<MyInt> as MyIntFoo {
  consumer bar(t: MyInt) {
    print("My Int is: {t}");
  }
}
implement Foo<MyOtherInt> as MyOtherIntFoo {
  consumer bar(t: MyOtherInt) {
    print("My Other Int is: {t}");
  }
}

# Runtime dynamic dispatch here will correctly dispatch to the impl based on which type you choose for `someCustomInt`.
var someCustomInt: oneof<MyInt, MyOtherInt> = myInt;
Foo::bar(someCustomInt);
someCustomInt = myOtherInt;
Foo::bar(someCustomInt);

########################################################################################################################
# DEMONSTRATE A CUSTOM TYPE THAT DEFINES A SINGLE "INITIALIZER" FUNCTION
#
# By defining an "initializers block" for the type `EvenInt` below, this program is now unable to construct an instance
# of `EvenInt` w/o going through the initializer function `GetValidatedEvenInt`. This has the powerful implication that
# no matter what, if you have an instance of `EvenInt`, you know for a fact that the wrapped `int` is even.
########################################################################################################################

newtype NothingType : boolean
initializers NothingType {
  provider Nothing() -> NothingType {
    return NothingType(false);
  }
}

newtype EvenInt : int

initializers EvenInt {
  function GetValidatedEvenInt(x: int) -> oneof<EvenInt, NothingType> {
    if (x % 2 == 1) {
      return Nothing();
    }
    return EvenInt(x);
  }
}


var firstEvenInt : oneof<EvenInt, NothingType> = GetValidatedEvenInt(2);
if (firstEvenInt instanceof EvenInt) {
  print("I successfully initialized an EvenInt! {firstEvenInt}");
  type(firstEvenInt); # Via type-narrowing, Claro is aware that this is an EventInt.
}
firstEvenInt = GetValidatedEvenInt(3);
if (firstEvenInt instanceof NothingType) {
  print("The odd int 3 was correctly rejected!: {firstEvenInt}");
  type(firstEvenInt); # Via type-narrowing, Claro is aware that this is a NothingType.
}


# It is impossible to call `EvenInt`'s constructor directly since the initializers block is defined for that type. Try
# Uncommenting the lines below w/ the call to `EvenInt(3)` and you'll see this error message:
#  "user_defined_types.claro:xxx: Illegal Use of User-Defined Type Constructor Outside of Initializers Block: An initializers
#    block has been defined for the custom type `EvenInt`, so, in order to maintain any semantic constraints that the
#    initializers are intended to impose on the type, you aren't allowed to use the type's default constructor directly.
#   		Instead, to get an instance of this type, consider calling one of the defined initializers:
#   			- GetValidatedEvenInt
#   var shouldMakeThisInvalid : EvenInt = EvenInt(3);
#                                         ^^^^^^^^^^
#   1 Error"

#var thisWillNotCompile: EvenInt = EvenInt(3);
#print(thisWillNotCompile);


# One of the extremely powerful capabilities Claro's approach to types gives you is that you can start to nest these
# constraints arbitrarily.

# TODO(steving) Refactor once I can define this as a type with a generic type param.
newtype EvenIntGreaterThan10 : EvenInt

initializers EvenIntGreaterThan10 {
  function GetValidatedEvenIntGreaterThan10(x: EvenInt) -> oneof<EvenIntGreaterThan10, NothingType> {
    if (unwrap(x) > 10) {
      return EvenIntGreaterThan10(x);
    }
    return Nothing();
  }
  function GetValidatedEvenIntGreaterThan10FromInt(x: int) -> oneof<EvenIntGreaterThan10, NothingType> {
    # TODO(steving) Rewrite this once the oneof error checking early return via `?` is supported.
    var maybeEvenInt = GetValidatedEvenInt(x);
    if (maybeEvenInt instanceof EvenInt) {
      if (x > 10) {
        return EvenIntGreaterThan10(maybeEvenInt);
      }
    }
    return Nothing();
  }
}

var i = 5;
while (i < 15) {
  var maybeEvenIntGreaterThan10 = GetValidatedEvenIntGreaterThan10FromInt(i);
  print("Validated int {i++} is even and greater than 10?: {maybeEvenIntGreaterThan10}");
}

########################################################################################################################
# DEMONSTRATE A CUSTOM TYPE THAT DEFINES AN "INITIALIZER" AND AN "UNWRAPPER" FUNCTION
#
# By defining an "initializers block" for the type `FasterLookupEncodedString` below, this type enforces the semantic
# that every instance of `FasterLookupEncodedString` will be encoded as a string starting with a sequence of numbers
# separated by commas representing the respective starting indices of all of the strings stored in this encoding:
#   E.g. "dog,kitten,antelope" encoded as "0,3,9|dogkittenantelope".
# This is a very contrived example to demonstrate that if you wanted to enforce "decoding" when unwrapping the
# `FasterLookupEncodedString` you could use an `unwrappers` block to achieve it. So you could "decode"
# "3,6,8|dogkittenantelope" back into "dog,kitten,antelope" when unwrapping.
########################################################################################################################

newtype CSVStrings : string

initializers CSVStrings {
  # TODO(steving) Refactor this to take mut? [string] once Claro supports mut-generics.
  function CSVStringsFromMutList(l: mut [string]) -> CSVStrings {
    var csv = l[0];
    var i = 0;
    while (++i < len(l)) {
      csv = "{csv},{l[i]}";
    }
    return CSVStrings(csv);
  }
}

newtype FasterLookupEncodedString : string

initializers FasterLookupEncodedString {
  # It would be faster to first convert to this format and then do your lookup if you're expecting to be doing more than
  # a small number of lookups over a large csv. Don't forget that this is a contrived example, I'm not claiming that
  # you should do this specific thing in "real life".
  function FasterLookupEncodedStringFromCSVStrings(csv: CSVStrings) -> FasterLookupEncodedString {
    var words = "";
    var encodedStrWordInds = "0";
    var prevLen = 0;
    var currLen = 0;
    var i = 0;
    while (i < len(unwrap(csv))) {
      if (unwrap(csv)[i] == ",") {
        encodedStrWordInds = "{encodedStrWordInds},{currLen + prevLen}";
        prevLen = prevLen + currLen;
        currLen = 0;
      } else {
        currLen++;
        words = "{words}{unwrap(csv)[i]}";
      }
      i++;
    }
    return FasterLookupEncodedString("{encodedStrWordInds}|{words}");
  }
}

unwrappers FasterLookupEncodedString {
  function DecodeToStringsList(encodedCsv: FasterLookupEncodedString) -> mut [string] {
    var encodedCsvAsString: string = unwrap(encodedCsv);
    var valueCount = 1;
    var i = 0;
    while (encodedCsvAsString[i] != "|") {
      if (encodedCsvAsString[i++] == ",") {
        valueCount = valueCount + 1;
      }
    }
    # TODO(steving) Refactor this example once Claro supports either list comprehension or copy-free builder semantics.
    var values: mut [string] = mut [];
    i = 0;
    while (i < valueCount) {
      append(values, fastLookupNthCSVValue(encodedCsv, i++));
    }
    return values;
  }

  # This really just defers to the auto-generated `unwrap()` function, but is now necessary since decoders are
  # implemented for this type. It's hard to imagine since all of this code is in a single file, but if this type were
  # being exported in a Module, you would *NOT* publicly export this function!
  function ToRawEncodedString(encodedCsv: FasterLookupEncodedString) -> string {
    return unwrap(encodedCsv);
  }
}

# Notice that this doesn't need to be defined as an "unwrapper" function since it doesn't directly depend on `unwrap`.
function DecodeToCSVStrings(encodedCsv: FasterLookupEncodedString) -> CSVStrings {
  var values = DecodeToStringsList(encodedCsv);
  return CSVStringsFromMutList(values);
}

function slowLookupNthCSVValue(csv: CSVStrings, n: int) -> string {
  var currValueNum = 0;
  var i = 0;
  while (currValueNum != n) {
    if (unwrap(csv)[i++] == ",") {
      currValueNum = currValueNum + 1;
    }
  }
  var res = "";
  while ((i < len(unwrap(csv))) and (unwrap(csv)[i] != ",")) {
    res = "{res}{unwrap(csv)[i++]}";
  }
  return res;
}

function fastLookupNthCSVValue(encodedCsv: FasterLookupEncodedString, n: int) -> string {
  var encodedCsvAsString: string = ToRawEncodedString(encodedCsv);
  var i = 0;
  var currValueNum = 0;
  var nthValInd = 0;
  var nextValInd = 0;
  var charToIntMap = {"0":0, "1":1, "2":2, "3":3, "4":4, "5":5, "6":6, "7":7, "8":8, "9":9};
  while (encodedCsvAsString[i] != "|") {
    if (encodedCsvAsString[i] == ",") {
      currValueNum = currValueNum + 1;
    } else if (currValueNum == n) {
      nthValInd = nthValInd * 10 + charToIntMap[encodedCsvAsString[i]];
    } else if (currValueNum == n + 1) {
      nextValInd = nextValInd * 10 + charToIntMap[encodedCsvAsString[i]];
    }
    i++;
  }
  i = i + nthValInd + 1;
  var end: int;
  if (nextValInd == 0) {
    end = len(encodedCsvAsString);
  } else {
    end = i + (nextValInd - nthValInd);
  }
  var res = "";
  while (i < end) {
    res = "{res}{encodedCsvAsString[i++]}";
  }
  return res;
}

print("--------------------------------------------------------------------------------");
var csvValues =
  mut [
    "dog",
    "kitten",
    # Got some random text from an AI chatbot, how neat.
    "Lorem ipsum dolor sit amet consectetur adipiscing elit. Nullam non nulla vel massa posuere blandit eget in quam. Suspendisse tincidunt velit vel quam cursus euismod. Fusce nec feugiat nulla eget sagittis odio. Duis in augue quis ante consequat tincidunt id quis ipsum. Quisque vel tortor nec dolor iaculis hendrerit sit amet eu nisl. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nam luctus vel arcu ut mattis. Curabitur iaculis vel metus ac vehicula. Nulla facilisi. Fusce fringilla eros nec nisl dapibus vel aliquet eros blandit. Nulla facilisi. Mauris luctus purus id justo venenatis imperdiet. Praesent vitae ante in dolor bibendum consectetur ac quis urna. In hac habitasse platea dictumst. Pellentesque sodales turpis sit amet tempor maximus metus eros faucibus quam quis feugiat lacus velit non velit. Nulla facilisi. In ac urna in tellus ultricies hendrerit. Vestibulum ut urna vel nulla lobortis bibendum. Morbi ullamcorper urna in vestibulum luctus mauris purus eleifend libero sed aliquam turpis quam nec massa. Integer malesuada blandit nulla vel volutpat. Aliquam erat volutpat. Sed laoreet justo sit amet leo venenatis scelerisque. Vivamus faucibus consectetur mauris ac tincidunt nulla imperdiet vel. Nulla facilisi. Donec vehicula metus sapien a porta purus tincidunt ac. Sed sed ligula eros. Integer quis mauris a erat tristique dictum. Donec eget ante ac orci suscipit suscipit id eu elit. Sed tincidunt felis ac tellus efficitur",
    "antelope"
  ];
var csv = CSVStringsFromMutList(csvValues);
print(csv); # CSVStrings(dog,kitten,Lorem ipsum dolor sit amet consectetur adipiscing elit. Nullam non nulla vel massa posuere blandit eget in quam. Suspendisse tincidunt velit vel quam cursus euismod. Fusce nec feugiat nulla eget sagittis odio. Duis in augue quis ante consequat tincidunt id quis ipsum. Quisque vel tortor nec dolor iaculis hendrerit sit amet eu nisl. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nam luctus vel arcu ut mattis. Curabitur iaculis vel metus ac vehicula. Nulla facilisi. Fusce fringilla eros nec nisl dapibus vel aliquet eros blandit. Nulla facilisi. Mauris luctus purus id justo venenatis imperdiet. Praesent vitae ante in dolor bibendum consectetur ac quis urna. In hac habitasse platea dictumst. Pellentesque sodales turpis sit amet tempor maximus metus eros faucibus quam quis feugiat lacus velit non velit. Nulla facilisi. In ac urna in tellus ultricies hendrerit. Vestibulum ut urna vel nulla lobortis bibendum. Morbi ullamcorper urna in vestibulum luctus mauris purus eleifend libero sed aliquam turpis quam nec massa. Integer malesuada blandit nulla vel volutpat. Aliquam erat volutpat. Sed laoreet justo sit amet leo venenatis scelerisque. Vivamus faucibus consectetur mauris ac tincidunt nulla imperdiet vel. Nulla facilisi. Donec vehicula metus sapien a porta purus tincidunt ac. Sed sed ligula eros. Integer quis mauris a erat tristique dictum. Donec eget ante ac orci suscipit suscipit id eu elit. Sed tincidunt felis ac tellus efficitur,antelope)

print("--------------------------------------------------------------------------------");
var fastEncoding = FasterLookupEncodedStringFromCSVStrings(csv);
print(fastEncoding); # FasterLookupEncodedString(0,3,9,1498|dogkittenLorem ipsum dolor sit amet consectetur adipiscing elit. Nullam non nulla vel massa posuere blandit eget in quam. Suspendisse tincidunt velit vel quam cursus euismod. Fusce nec feugiat nulla eget sagittis odio. Duis in augue quis ante consequat tincidunt id quis ipsum. Quisque vel tortor nec dolor iaculis hendrerit sit amet eu nisl. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nam luctus vel arcu ut mattis. Curabitur iaculis vel metus ac vehicula. Nulla facilisi. Fusce fringilla eros nec nisl dapibus vel aliquet eros blandit. Nulla facilisi. Mauris luctus purus id justo venenatis imperdiet. Praesent vitae ante in dolor bibendum consectetur ac quis urna. In hac habitasse platea dictumst. Pellentesque sodales turpis sit amet tempor maximus metus eros faucibus quam quis feugiat lacus velit non velit. Nulla facilisi. In ac urna in tellus ultricies hendrerit. Vestibulum ut urna vel nulla lobortis bibendum. Morbi ullamcorper urna in vestibulum luctus mauris purus eleifend libero sed aliquam turpis quam nec massa. Integer malesuada blandit nulla vel volutpat. Aliquam erat volutpat. Sed laoreet justo sit amet leo venenatis scelerisque. Vivamus faucibus consectetur mauris ac tincidunt nulla imperdiet vel. Nulla facilisi. Donec vehicula metus sapien a porta purus tincidunt ac. Sed sed ligula eros. Integer quis mauris a erat tristique dictum. Donec eget ante ac orci suscipit suscipit id eu elit. Sed tincidunt felis ac tellus efficiturantelope)

print("--------------------------------------------------------------------------------");
print(slowLookupNthCSVValue(csv, 0)); # dog
print(slowLookupNthCSVValue(csv, 1)); # kitten
print(slowLookupNthCSVValue(csv, 3)); # antelope
print("--------------------------------------------------------------------------------");
print(fastLookupNthCSVValue(fastEncoding, 0)); # dog
print(fastLookupNthCSVValue(fastEncoding, 1)); # kitten
print(fastLookupNthCSVValue(fastEncoding, 3)); # antelope

print("--------------------------------------------------------------------------------");
print("DecodeToStringsList(fastEncoding) == csvValues -> {DecodeToStringsList(fastEncoding) == csvValues}");
print("DecodeToCSVStrings(fastEncoding) == csv -> {DecodeToCSVStrings(fastEncoding) == csv}");