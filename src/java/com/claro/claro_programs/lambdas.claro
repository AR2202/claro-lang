consumer testPassingLambdasAsArgs(x: int, f: function<int -> int>) {
  print(f(x));
}

testPassingLambdasAsArgs(
  900,
  x -> 2 * x);


function foo(x: int, f: function<int -> int>) -> int {
  return f(x);
}

print(foo(2, y -> -5 * y) + foo(10, x -> 10 * x));
print(foo(2, y -> -5 * y));
print(foo(10, x -> 10 * x));


# Lambdas can capture state defined before them.
var i = "hello";
print(
  foo(
    111,
    z -> {
      print(i);
      # And you can even recursively use lambdas w/in lambdas.
      testPassingLambdasAsArgs(100000, x -> x);
      return z;
    }
  )
);

provider testProcedureCanReturnLambda() -> function<int -> int> {
#  var f: function<int -> int> = x -> x;
#  return f;
  return x -> x;
}

var returnedLambda = testProcedureCanReturnLambda();
print(returnedLambda(8));

# Lambdas can be defined within procedure bodies as well.
function testLambdasWithinProcedureBodies(x: int) -> string {
  testPassingLambdasAsArgs(x, arg1 -> 100 * arg1);
  return "returns work even after lambda return";
}
print(testLambdasWithinProcedureBodies(23));


# This shows the power of lambdas in Claro. You can even now define your own partial application function.
function partial(first: int, f: function<|int, int| -> int>) -> function<int -> int> {
  return second -> {
    # This variable is here just to show off that Claro supports multi-line lambdas too!
    var res = f(first, second);
    return res;
  };
}

var add10 = partial(10, lambda (first, second) -> {return first + second;});
print(add10(20));  # 30
print(add10(30));  # 40

# TODO(steving) Implement Type Aliases to make type declarations like this one easier to read.
#  alias IntFunction : function<int -> int>
#  alias IntBiFunction : function<|int, int| -> int>
#  var partialLambda: function<|int, IntBiFunction| -> IntFunction>;
var partialLambda: function<|int, function<|int, int| -> int>| -> function<int -> int>> =
  lambda (first, l) -> second -> l(first, second);

var add10Partial = partialLambda(10, lambda (first, second) -> first + second);
print(add10Partial(100));  # 110