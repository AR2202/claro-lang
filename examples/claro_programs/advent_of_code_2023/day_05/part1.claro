alias Range : struct { lowInclusive: long, highExclusive: long, posShiftMapping: long }

resources::Input
  |> files::readOrPanic(^)
  |> strings::split(^, "\n\n")
  |> [strings::split(strings::split(s, ":\\s")[1], "\n") | s in ^]
  |> {
        seeds = [Utils::orElse(longs::parseLong(num), -1L) | num in strings::split(^[0][0], " ")],
        maps = [[parseRange(nums) | nums in mapping] | mapping in tail(^)]
     }
  # At this point I'm gonna stop trying to be so tricky today and drop down into some good ol' imperative style.
  |> var seedsAndMappings = ^;

var closestLocation = longs::MAX_VALUE;
for (currVal in seedsAndMappings.seeds) {
  for (mapping in seedsAndMappings.maps) {
    currVal = getMappedVal(mapping, currVal);
  }
  if (currVal < closestLocation) {
    closestLocation = currVal;
  }
}
print("Closest seed location: {closestLocation}");

function parseRange(nums: string) -> Range {
  var longs: [long] = [Utils::orElse(longs::parseLong(i), -1L) | i in strings::split(nums, " ")];
  return {
    lowInclusive = longs[1],
    highExclusive = longs[1] + longs[2],
    posShiftMapping = longs[0] - longs[1]
  };
}

function getMappedVal(mapping: [Range], currVal: long) -> long {
  for (range in mapping) {
    if ((currVal >= range.lowInclusive) and (currVal < range.highExclusive)) {
      return currVal + range.posShiftMapping; # Found the map it's in.
    }
  }
  return currVal; # No mapping.
}

function tail<T>(l: [T]) -> [T] {
  var res = lists::subList(l, 1, len(l));
  if (res instanceof [T]) {
    return res;
  }
  return [];
}
