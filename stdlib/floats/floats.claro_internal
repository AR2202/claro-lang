provider static_MAX_VALUE() -> float {
  var res: float;
  $$BEGIN_JAVA
    res = java.lang.Float.MAX_VALUE;
  $$END_JAVA
  return res;
}
provider static_MIN_VALUE() -> float {
  var res: float;
  $$BEGIN_JAVA
    res = java.lang.Float.MIN_VALUE;
  $$END_JAVA
  return res;
}


function parseFloat(s: string) -> oneof<float, std::Error<InvalidNumberFormat>> {
  var res: oneof<float, std::Error<InvalidNumberFormat>>;

  var errCons = (msg: string) -> std::Error<InvalidNumberFormat> { return std::Error(InvalidNumberFormat({msg = msg})); };

  $$BEGIN_JAVA
    try {
      res = java.lang.Double.parseDouble(s);
    } catch (java.lang.NumberFormatException e) {
      res = errCons.apply(e.getMessage());
    }
  $$END_JAVA
  return res;
}
